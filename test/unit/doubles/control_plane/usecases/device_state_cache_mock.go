// Code generated by MockGen. DO NOT EDIT.
// Source: device_state_cache.go
//
// Generated by this command:
//
//	mockgen -source=device_state_cache.go -destination=../../../test/unit/doubles/control_plane/usecases/device_state_cache_mock.go -package=usecases -mock_names=DeviceStateCacheService=MockDeviceStateCacheService
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	usecases "zensor-server/internal/control_plane/usecases"
	dto "zensor-server/internal/data_plane/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceStateCacheService is a mock of DeviceStateCacheService interface.
type MockDeviceStateCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceStateCacheServiceMockRecorder
	isgomock struct{}
}

// MockDeviceStateCacheServiceMockRecorder is the mock recorder for MockDeviceStateCacheService.
type MockDeviceStateCacheServiceMockRecorder struct {
	mock *MockDeviceStateCacheService
}

// NewMockDeviceStateCacheService creates a new mock instance.
func NewMockDeviceStateCacheService(ctrl *gomock.Controller) *MockDeviceStateCacheService {
	mock := &MockDeviceStateCacheService{ctrl: ctrl}
	mock.recorder = &MockDeviceStateCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceStateCacheService) EXPECT() *MockDeviceStateCacheServiceMockRecorder {
	return m.recorder
}

// GetAllDeviceIDs mocks base method.
func (m *MockDeviceStateCacheService) GetAllDeviceIDs(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeviceIDs", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllDeviceIDs indicates an expected call of GetAllDeviceIDs.
func (mr *MockDeviceStateCacheServiceMockRecorder) GetAllDeviceIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeviceIDs", reflect.TypeOf((*MockDeviceStateCacheService)(nil).GetAllDeviceIDs), ctx)
}

// GetState mocks base method.
func (m *MockDeviceStateCacheService) GetState(ctx context.Context, deviceID string) (usecases.DeviceState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, deviceID)
	ret0, _ := ret[0].(usecases.DeviceState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockDeviceStateCacheServiceMockRecorder) GetState(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockDeviceStateCacheService)(nil).GetState), ctx, deviceID)
}

// SetState mocks base method.
func (m *MockDeviceStateCacheService) SetState(ctx context.Context, deviceID string, data map[string][]dto.SensorData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", ctx, deviceID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockDeviceStateCacheServiceMockRecorder) SetState(ctx, deviceID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockDeviceStateCacheService)(nil).SetState), ctx, deviceID, data)
}
