// Code generated by MockGen. DO NOT EDIT.
// Source: repository_port.go
//
// Generated by this command:
//
//	mockgen -source=repository_port.go -destination=../../../test/unit/doubles/control_plane/usecases/repository_port_mock.go -package=usecases -mock_names=DeviceRepository=MockDeviceRepository,CommandRepository=MockCommandRepository,EvaluationRuleRepository=MockEvaluationRuleRepository,TaskRepository=MockTaskRepository,ScheduledTaskRepository=MockScheduledTaskRepository,TenantConfigurationRepository=MockTenantConfigurationRepository,UserRepository=MockUserRepository
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	usecases "zensor-server/internal/control_plane/usecases"
	domain "zensor-server/internal/shared_kernel/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
	isgomock struct{}
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// AddEvaluationRule mocks base method.
func (m *MockDeviceRepository) AddEvaluationRule(arg0 context.Context, arg1 domain.Device, arg2 domain.EvaluationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvaluationRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvaluationRule indicates an expected call of AddEvaluationRule.
func (mr *MockDeviceRepositoryMockRecorder) AddEvaluationRule(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvaluationRule", reflect.TypeOf((*MockDeviceRepository)(nil).AddEvaluationRule), arg0, arg1, arg2)
}

// CreateDevice mocks base method.
func (m *MockDeviceRepository) CreateDevice(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevice), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockDeviceRepository) FindAll(arg0 context.Context, arg1 usecases.Pagination) ([]domain.Device, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDeviceRepositoryMockRecorder) FindAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDeviceRepository)(nil).FindAll), arg0, arg1)
}

// FindAllEvaluationRules mocks base method.
func (m *MockDeviceRepository) FindAllEvaluationRules(arg0 context.Context, arg1 domain.Device) ([]domain.EvaluationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEvaluationRules", arg0, arg1)
	ret0, _ := ret[0].([]domain.EvaluationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEvaluationRules indicates an expected call of FindAllEvaluationRules.
func (mr *MockDeviceRepositoryMockRecorder) FindAllEvaluationRules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEvaluationRules", reflect.TypeOf((*MockDeviceRepository)(nil).FindAllEvaluationRules), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockDeviceRepository) FindByName(arg0 context.Context, arg1 string) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockDeviceRepositoryMockRecorder) FindByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockDeviceRepository)(nil).FindByName), arg0, arg1)
}

// FindByTenant mocks base method.
func (m *MockDeviceRepository) FindByTenant(arg0 context.Context, arg1 string, arg2 usecases.Pagination) ([]domain.Device, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTenant", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTenant indicates an expected call of FindByTenant.
func (mr *MockDeviceRepositoryMockRecorder) FindByTenant(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTenant", reflect.TypeOf((*MockDeviceRepository)(nil).FindByTenant), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockDeviceRepository) Get(arg0 context.Context, arg1 string) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceRepository)(nil).Get), arg0, arg1)
}

// UpdateDevice mocks base method.
func (m *MockDeviceRepository) UpdateDevice(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDevice), arg0, arg1)
}

// MockCommandRepository is a mock of CommandRepository interface.
type MockCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRepositoryMockRecorder
	isgomock struct{}
}

// MockCommandRepositoryMockRecorder is the mock recorder for MockCommandRepository.
type MockCommandRepositoryMockRecorder struct {
	mock *MockCommandRepository
}

// NewMockCommandRepository creates a new mock instance.
func NewMockCommandRepository(ctrl *gomock.Controller) *MockCommandRepository {
	mock := &MockCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRepository) EXPECT() *MockCommandRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommandRepository) Create(arg0 context.Context, arg1 domain.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommandRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommandRepository)(nil).Create), arg0, arg1)
}

// FindAllPending mocks base method.
func (m *MockCommandRepository) FindAllPending(arg0 context.Context) ([]domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPending", arg0)
	ret0, _ := ret[0].([]domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPending indicates an expected call of FindAllPending.
func (mr *MockCommandRepositoryMockRecorder) FindAllPending(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPending", reflect.TypeOf((*MockCommandRepository)(nil).FindAllPending), arg0)
}

// FindByTaskID mocks base method.
func (m *MockCommandRepository) FindByTaskID(arg0 context.Context, arg1 domain.ID) ([]domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaskID", arg0, arg1)
	ret0, _ := ret[0].([]domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaskID indicates an expected call of FindByTaskID.
func (mr *MockCommandRepositoryMockRecorder) FindByTaskID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaskID", reflect.TypeOf((*MockCommandRepository)(nil).FindByTaskID), arg0, arg1)
}

// FindPendingByDevice mocks base method.
func (m *MockCommandRepository) FindPendingByDevice(arg0 context.Context, arg1 domain.ID) ([]domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendingByDevice", arg0, arg1)
	ret0, _ := ret[0].([]domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendingByDevice indicates an expected call of FindPendingByDevice.
func (mr *MockCommandRepositoryMockRecorder) FindPendingByDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendingByDevice", reflect.TypeOf((*MockCommandRepository)(nil).FindPendingByDevice), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockCommandRepository) GetByID(arg0 context.Context, arg1 domain.ID) (domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCommandRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCommandRepository)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockCommandRepository) Update(arg0 context.Context, arg1 domain.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommandRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommandRepository)(nil).Update), arg0, arg1)
}

// MockEvaluationRuleRepository is a mock of EvaluationRuleRepository interface.
type MockEvaluationRuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationRuleRepositoryMockRecorder
	isgomock struct{}
}

// MockEvaluationRuleRepositoryMockRecorder is the mock recorder for MockEvaluationRuleRepository.
type MockEvaluationRuleRepositoryMockRecorder struct {
	mock *MockEvaluationRuleRepository
}

// NewMockEvaluationRuleRepository creates a new mock instance.
func NewMockEvaluationRuleRepository(ctrl *gomock.Controller) *MockEvaluationRuleRepository {
	mock := &MockEvaluationRuleRepository{ctrl: ctrl}
	mock.recorder = &MockEvaluationRuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationRuleRepository) EXPECT() *MockEvaluationRuleRepositoryMockRecorder {
	return m.recorder
}

// AddToDevice mocks base method.
func (m *MockEvaluationRuleRepository) AddToDevice(arg0 context.Context, arg1 domain.Device, arg2 domain.EvaluationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDevice indicates an expected call of AddToDevice.
func (mr *MockEvaluationRuleRepositoryMockRecorder) AddToDevice(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToDevice", reflect.TypeOf((*MockEvaluationRuleRepository)(nil).AddToDevice), arg0, arg1, arg2)
}

// FindAllByDeviceID mocks base method.
func (m *MockEvaluationRuleRepository) FindAllByDeviceID(ctx context.Context, deviceID string) ([]domain.EvaluationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByDeviceID", ctx, deviceID)
	ret0, _ := ret[0].([]domain.EvaluationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByDeviceID indicates an expected call of FindAllByDeviceID.
func (mr *MockEvaluationRuleRepositoryMockRecorder) FindAllByDeviceID(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByDeviceID", reflect.TypeOf((*MockEvaluationRuleRepository)(nil).FindAllByDeviceID), ctx, deviceID)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(arg0 context.Context, arg1 domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), arg0, arg1)
}

// FindAllByDevice mocks base method.
func (m *MockTaskRepository) FindAllByDevice(ctx context.Context, device domain.Device, pagination usecases.Pagination) ([]domain.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByDevice", ctx, device, pagination)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByDevice indicates an expected call of FindAllByDevice.
func (mr *MockTaskRepositoryMockRecorder) FindAllByDevice(ctx, device, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByDevice", reflect.TypeOf((*MockTaskRepository)(nil).FindAllByDevice), ctx, device, pagination)
}

// FindAllByScheduledTask mocks base method.
func (m *MockTaskRepository) FindAllByScheduledTask(ctx context.Context, scheduledTaskID domain.ID, pagination usecases.Pagination) ([]domain.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByScheduledTask", ctx, scheduledTaskID, pagination)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByScheduledTask indicates an expected call of FindAllByScheduledTask.
func (mr *MockTaskRepositoryMockRecorder) FindAllByScheduledTask(ctx, scheduledTaskID, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByScheduledTask", reflect.TypeOf((*MockTaskRepository)(nil).FindAllByScheduledTask), ctx, scheduledTaskID, pagination)
}

// MockScheduledTaskRepository is a mock of ScheduledTaskRepository interface.
type MockScheduledTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockScheduledTaskRepositoryMockRecorder is the mock recorder for MockScheduledTaskRepository.
type MockScheduledTaskRepositoryMockRecorder struct {
	mock *MockScheduledTaskRepository
}

// NewMockScheduledTaskRepository creates a new mock instance.
func NewMockScheduledTaskRepository(ctrl *gomock.Controller) *MockScheduledTaskRepository {
	mock := &MockScheduledTaskRepository{ctrl: ctrl}
	mock.recorder = &MockScheduledTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduledTaskRepository) EXPECT() *MockScheduledTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScheduledTaskRepository) Create(arg0 context.Context, arg1 domain.ScheduledTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScheduledTaskRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScheduledTaskRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockScheduledTaskRepository) Delete(arg0 context.Context, arg1 domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScheduledTaskRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScheduledTaskRepository)(nil).Delete), arg0, arg1)
}

// FindAllActive mocks base method.
func (m *MockScheduledTaskRepository) FindAllActive(arg0 context.Context) ([]domain.ScheduledTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllActive", arg0)
	ret0, _ := ret[0].([]domain.ScheduledTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllActive indicates an expected call of FindAllActive.
func (mr *MockScheduledTaskRepositoryMockRecorder) FindAllActive(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllActive", reflect.TypeOf((*MockScheduledTaskRepository)(nil).FindAllActive), arg0)
}

// FindAllByTenant mocks base method.
func (m *MockScheduledTaskRepository) FindAllByTenant(arg0 context.Context, arg1 domain.ID) ([]domain.ScheduledTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByTenant", arg0, arg1)
	ret0, _ := ret[0].([]domain.ScheduledTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByTenant indicates an expected call of FindAllByTenant.
func (mr *MockScheduledTaskRepositoryMockRecorder) FindAllByTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByTenant", reflect.TypeOf((*MockScheduledTaskRepository)(nil).FindAllByTenant), arg0, arg1)
}

// FindAllByTenantAndDevice mocks base method.
func (m *MockScheduledTaskRepository) FindAllByTenantAndDevice(arg0 context.Context, arg1, arg2 domain.ID, arg3 usecases.Pagination) ([]domain.ScheduledTask, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByTenantAndDevice", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.ScheduledTask)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByTenantAndDevice indicates an expected call of FindAllByTenantAndDevice.
func (mr *MockScheduledTaskRepositoryMockRecorder) FindAllByTenantAndDevice(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByTenantAndDevice", reflect.TypeOf((*MockScheduledTaskRepository)(nil).FindAllByTenantAndDevice), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockScheduledTaskRepository) GetByID(arg0 context.Context, arg1 domain.ID) (domain.ScheduledTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(domain.ScheduledTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockScheduledTaskRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockScheduledTaskRepository)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockScheduledTaskRepository) Update(arg0 context.Context, arg1 domain.ScheduledTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScheduledTaskRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScheduledTaskRepository)(nil).Update), arg0, arg1)
}

// MockTenantConfigurationRepository is a mock of TenantConfigurationRepository interface.
type MockTenantConfigurationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTenantConfigurationRepositoryMockRecorder
	isgomock struct{}
}

// MockTenantConfigurationRepositoryMockRecorder is the mock recorder for MockTenantConfigurationRepository.
type MockTenantConfigurationRepositoryMockRecorder struct {
	mock *MockTenantConfigurationRepository
}

// NewMockTenantConfigurationRepository creates a new mock instance.
func NewMockTenantConfigurationRepository(ctrl *gomock.Controller) *MockTenantConfigurationRepository {
	mock := &MockTenantConfigurationRepository{ctrl: ctrl}
	mock.recorder = &MockTenantConfigurationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantConfigurationRepository) EXPECT() *MockTenantConfigurationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTenantConfigurationRepository) Create(arg0 context.Context, arg1 domain.TenantConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTenantConfigurationRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTenantConfigurationRepository)(nil).Create), arg0, arg1)
}

// GetByTenantID mocks base method.
func (m *MockTenantConfigurationRepository) GetByTenantID(arg0 context.Context, arg1 domain.ID) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTenantID", arg0, arg1)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTenantID indicates an expected call of GetByTenantID.
func (mr *MockTenantConfigurationRepositoryMockRecorder) GetByTenantID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTenantID", reflect.TypeOf((*MockTenantConfigurationRepository)(nil).GetByTenantID), arg0, arg1)
}

// Update mocks base method.
func (m *MockTenantConfigurationRepository) Update(arg0 context.Context, arg1 domain.TenantConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTenantConfigurationRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTenantConfigurationRepository)(nil).Update), arg0, arg1)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(arg0 context.Context, arg1 domain.ID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockUserRepository) Upsert(arg0 context.Context, arg1 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserRepositoryMockRecorder) Upsert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserRepository)(nil).Upsert), arg0, arg1)
}
