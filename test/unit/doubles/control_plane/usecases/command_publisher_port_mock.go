// Code generated by MockGen. DO NOT EDIT.
// Source: command_publisher_port.go
//
// Generated by this command:
//
//	mockgen -source=command_publisher_port.go -destination=../../../test/unit/doubles/control_plane/usecases/command_publisher_port_mock.go -package=usecases -mock_names=CommandPublisher=MockCommandPublisher
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	domain "zensor-server/internal/shared_kernel/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandPublisher is a mock of CommandPublisher interface.
type MockCommandPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockCommandPublisherMockRecorder
	isgomock struct{}
}

// MockCommandPublisherMockRecorder is the mock recorder for MockCommandPublisher.
type MockCommandPublisherMockRecorder struct {
	mock *MockCommandPublisher
}

// NewMockCommandPublisher creates a new mock instance.
func NewMockCommandPublisher(ctrl *gomock.Controller) *MockCommandPublisher {
	mock := &MockCommandPublisher{ctrl: ctrl}
	mock.recorder = &MockCommandPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandPublisher) EXPECT() *MockCommandPublisherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockCommandPublisher) Dispatch(arg0 context.Context, arg1 domain.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockCommandPublisherMockRecorder) Dispatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockCommandPublisher)(nil).Dispatch), arg0, arg1)
}
