// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go
//
// Generated by this command:
//
//	mockgen -source=./api.go -destination=../../../test/unit/doubles/control_plane/usecases/api.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	usecases "zensor-server/internal/control_plane/usecases"
	domain "zensor-server/internal/shared_kernel/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceService is a mock of DeviceService interface.
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
	isgomock struct{}
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService.
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance.
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// AdoptDeviceToTenant mocks base method.
func (m *MockDeviceService) AdoptDeviceToTenant(arg0 context.Context, arg1, arg2 domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptDeviceToTenant", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptDeviceToTenant indicates an expected call of AdoptDeviceToTenant.
func (mr *MockDeviceServiceMockRecorder) AdoptDeviceToTenant(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptDeviceToTenant", reflect.TypeOf((*MockDeviceService)(nil).AdoptDeviceToTenant), arg0, arg1, arg2)
}

// AllDevices mocks base method.
func (m *MockDeviceService) AllDevices(arg0 context.Context, arg1 usecases.Pagination) ([]domain.Device, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDevices", arg0, arg1)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllDevices indicates an expected call of AllDevices.
func (mr *MockDeviceServiceMockRecorder) AllDevices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDevices", reflect.TypeOf((*MockDeviceService)(nil).AllDevices), arg0, arg1)
}

// CreateDevice mocks base method.
func (m *MockDeviceService) CreateDevice(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceServiceMockRecorder) CreateDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceService)(nil).CreateDevice), arg0, arg1)
}

// DevicesByTenant mocks base method.
func (m *MockDeviceService) DevicesByTenant(arg0 context.Context, arg1 domain.ID, arg2 usecases.Pagination) ([]domain.Device, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DevicesByTenant", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DevicesByTenant indicates an expected call of DevicesByTenant.
func (mr *MockDeviceServiceMockRecorder) DevicesByTenant(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DevicesByTenant", reflect.TypeOf((*MockDeviceService)(nil).DevicesByTenant), arg0, arg1, arg2)
}

// GetDevice mocks base method.
func (m *MockDeviceService) GetDevice(arg0 context.Context, arg1 domain.ID) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDeviceServiceMockRecorder) GetDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceService)(nil).GetDevice), arg0, arg1)
}

// QueueCommand mocks base method.
func (m *MockDeviceService) QueueCommand(arg0 context.Context, arg1 domain.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCommand indicates an expected call of QueueCommand.
func (mr *MockDeviceServiceMockRecorder) QueueCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCommand", reflect.TypeOf((*MockDeviceService)(nil).QueueCommand), arg0, arg1)
}

// QueueCommandSequence mocks base method.
func (m *MockDeviceService) QueueCommandSequence(arg0 context.Context, arg1 domain.CommandSequence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCommandSequence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCommandSequence indicates an expected call of QueueCommandSequence.
func (mr *MockDeviceServiceMockRecorder) QueueCommandSequence(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCommandSequence", reflect.TypeOf((*MockDeviceService)(nil).QueueCommandSequence), arg0, arg1)
}

// UpdateDeviceDisplayName mocks base method.
func (m *MockDeviceService) UpdateDeviceDisplayName(arg0 context.Context, arg1 domain.ID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceDisplayName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceDisplayName indicates an expected call of UpdateDeviceDisplayName.
func (mr *MockDeviceServiceMockRecorder) UpdateDeviceDisplayName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceDisplayName", reflect.TypeOf((*MockDeviceService)(nil).UpdateDeviceDisplayName), arg0, arg1, arg2)
}

// UpdateLastMessageReceivedAt mocks base method.
func (m *MockDeviceService) UpdateLastMessageReceivedAt(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastMessageReceivedAt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastMessageReceivedAt indicates an expected call of UpdateLastMessageReceivedAt.
func (mr *MockDeviceServiceMockRecorder) UpdateLastMessageReceivedAt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastMessageReceivedAt", reflect.TypeOf((*MockDeviceService)(nil).UpdateLastMessageReceivedAt), arg0, arg1)
}

// MockEvaluationRuleService is a mock of EvaluationRuleService interface.
type MockEvaluationRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationRuleServiceMockRecorder
	isgomock struct{}
}

// MockEvaluationRuleServiceMockRecorder is the mock recorder for MockEvaluationRuleService.
type MockEvaluationRuleServiceMockRecorder struct {
	mock *MockEvaluationRuleService
}

// NewMockEvaluationRuleService creates a new mock instance.
func NewMockEvaluationRuleService(ctrl *gomock.Controller) *MockEvaluationRuleService {
	mock := &MockEvaluationRuleService{ctrl: ctrl}
	mock.recorder = &MockEvaluationRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationRuleService) EXPECT() *MockEvaluationRuleServiceMockRecorder {
	return m.recorder
}

// AddToDevice mocks base method.
func (m *MockEvaluationRuleService) AddToDevice(arg0 context.Context, arg1 domain.Device, arg2 domain.EvaluationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDevice indicates an expected call of AddToDevice.
func (mr *MockEvaluationRuleServiceMockRecorder) AddToDevice(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToDevice", reflect.TypeOf((*MockEvaluationRuleService)(nil).AddToDevice), arg0, arg1, arg2)
}

// FindAllByDevice mocks base method.
func (m *MockEvaluationRuleService) FindAllByDevice(arg0 context.Context, arg1 domain.Device) ([]domain.EvaluationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByDevice", arg0, arg1)
	ret0, _ := ret[0].([]domain.EvaluationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByDevice indicates an expected call of FindAllByDevice.
func (mr *MockEvaluationRuleServiceMockRecorder) FindAllByDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByDevice", reflect.TypeOf((*MockEvaluationRuleService)(nil).FindAllByDevice), arg0, arg1)
}

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
	isgomock struct{}
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskService) Create(arg0 context.Context, arg1 domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskService)(nil).Create), arg0, arg1)
}

// FindAllByDevice mocks base method.
func (m *MockTaskService) FindAllByDevice(arg0 context.Context, arg1 domain.ID, arg2 usecases.Pagination) ([]domain.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByDevice indicates an expected call of FindAllByDevice.
func (mr *MockTaskServiceMockRecorder) FindAllByDevice(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByDevice", reflect.TypeOf((*MockTaskService)(nil).FindAllByDevice), arg0, arg1, arg2)
}

// FindAllByScheduledTask mocks base method.
func (m *MockTaskService) FindAllByScheduledTask(arg0 context.Context, arg1 domain.ID, arg2 usecases.Pagination) ([]domain.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByScheduledTask", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByScheduledTask indicates an expected call of FindAllByScheduledTask.
func (mr *MockTaskServiceMockRecorder) FindAllByScheduledTask(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByScheduledTask", reflect.TypeOf((*MockTaskService)(nil).FindAllByScheduledTask), arg0, arg1, arg2)
}

// MockScheduledTaskService is a mock of ScheduledTaskService interface.
type MockScheduledTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledTaskServiceMockRecorder
	isgomock struct{}
}

// MockScheduledTaskServiceMockRecorder is the mock recorder for MockScheduledTaskService.
type MockScheduledTaskServiceMockRecorder struct {
	mock *MockScheduledTaskService
}

// NewMockScheduledTaskService creates a new mock instance.
func NewMockScheduledTaskService(ctrl *gomock.Controller) *MockScheduledTaskService {
	mock := &MockScheduledTaskService{ctrl: ctrl}
	mock.recorder = &MockScheduledTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduledTaskService) EXPECT() *MockScheduledTaskServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScheduledTaskService) Create(arg0 context.Context, arg1 domain.ScheduledTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScheduledTaskServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScheduledTaskService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockScheduledTaskService) Delete(arg0 context.Context, arg1 domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScheduledTaskServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScheduledTaskService)(nil).Delete), arg0, arg1)
}

// FindAllByTenant mocks base method.
func (m *MockScheduledTaskService) FindAllByTenant(arg0 context.Context, arg1 domain.ID) ([]domain.ScheduledTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByTenant", arg0, arg1)
	ret0, _ := ret[0].([]domain.ScheduledTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByTenant indicates an expected call of FindAllByTenant.
func (mr *MockScheduledTaskServiceMockRecorder) FindAllByTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByTenant", reflect.TypeOf((*MockScheduledTaskService)(nil).FindAllByTenant), arg0, arg1)
}

// FindAllByTenantAndDevice mocks base method.
func (m *MockScheduledTaskService) FindAllByTenantAndDevice(arg0 context.Context, arg1, arg2 domain.ID, arg3 usecases.Pagination) ([]domain.ScheduledTask, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByTenantAndDevice", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.ScheduledTask)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByTenantAndDevice indicates an expected call of FindAllByTenantAndDevice.
func (mr *MockScheduledTaskServiceMockRecorder) FindAllByTenantAndDevice(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByTenantAndDevice", reflect.TypeOf((*MockScheduledTaskService)(nil).FindAllByTenantAndDevice), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockScheduledTaskService) GetByID(arg0 context.Context, arg1 domain.ID) (domain.ScheduledTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(domain.ScheduledTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockScheduledTaskServiceMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockScheduledTaskService)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockScheduledTaskService) Update(arg0 context.Context, arg1 domain.ScheduledTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScheduledTaskServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScheduledTaskService)(nil).Update), arg0, arg1)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AssociateTenants mocks base method.
func (m *MockUserService) AssociateTenants(arg0 context.Context, arg1 domain.ID, arg2 []domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTenants", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateTenants indicates an expected call of AssociateTenants.
func (mr *MockUserServiceMockRecorder) AssociateTenants(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTenants", reflect.TypeOf((*MockUserService)(nil).AssociateTenants), arg0, arg1, arg2)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(arg0 context.Context, arg1 domain.ID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), arg0, arg1)
}

// MockTenantConfigurationService is a mock of TenantConfigurationService interface.
type MockTenantConfigurationService struct {
	ctrl     *gomock.Controller
	recorder *MockTenantConfigurationServiceMockRecorder
	isgomock struct{}
}

// MockTenantConfigurationServiceMockRecorder is the mock recorder for MockTenantConfigurationService.
type MockTenantConfigurationServiceMockRecorder struct {
	mock *MockTenantConfigurationService
}

// NewMockTenantConfigurationService creates a new mock instance.
func NewMockTenantConfigurationService(ctrl *gomock.Controller) *MockTenantConfigurationService {
	mock := &MockTenantConfigurationService{ctrl: ctrl}
	mock.recorder = &MockTenantConfigurationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantConfigurationService) EXPECT() *MockTenantConfigurationServiceMockRecorder {
	return m.recorder
}

// UpsertTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) UpsertTenantConfiguration(ctx context.Context, userID domain.ID, config domain.TenantConfiguration) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTenantConfiguration", ctx, userID, config)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertTenantConfiguration indicates an expected call of UpsertTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) UpsertTenantConfiguration(ctx, userID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).UpsertTenantConfiguration), ctx, userID, config)
}

// GetTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) GetTenantConfiguration(ctx context.Context, tenant domain.Tenant) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantConfiguration", ctx, tenant)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantConfiguration indicates an expected call of GetTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) GetTenantConfiguration(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).GetTenantConfiguration), ctx, tenant)
}

// GetOrCreateTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) GetOrCreateTenantConfiguration(ctx context.Context, tenant domain.Tenant, defaultTimezone string) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTenantConfiguration", ctx, tenant, defaultTimezone)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTenantConfiguration indicates an expected call of GetOrCreateTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) GetOrCreateTenantConfiguration(ctx, tenant, defaultTimezone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).GetOrCreateTenantConfiguration), ctx, tenant, defaultTimezone)
}
