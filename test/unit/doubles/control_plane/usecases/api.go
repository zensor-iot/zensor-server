// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go
//
// Generated by this command:
//
//	mockgen -source=./api.go -destination=../../../test/unit/doubles/control_plane/usecases/api.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"
	domain "zensor-server/internal/control_plane/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceService is a mock of DeviceService interface.
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService.
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance.
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// AllDevices mocks base method.
func (m *MockDeviceService) AllDevices(arg0 context.Context) ([]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDevices", arg0)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDevices indicates an expected call of AllDevices.
func (mr *MockDeviceServiceMockRecorder) AllDevices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDevices", reflect.TypeOf((*MockDeviceService)(nil).AllDevices), arg0)
}

// CreateDevice mocks base method.
func (m *MockDeviceService) CreateDevice(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceServiceMockRecorder) CreateDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceService)(nil).CreateDevice), arg0, arg1)
}

// QueueCommand mocks base method.
func (m *MockDeviceService) QueueCommand(arg0 context.Context, arg1 domain.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCommand indicates an expected call of QueueCommand.
func (mr *MockDeviceServiceMockRecorder) QueueCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCommand", reflect.TypeOf((*MockDeviceService)(nil).QueueCommand), arg0, arg1)
}

// MockEvaluationRuleService is a mock of EvaluationRuleService interface.
type MockEvaluationRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationRuleServiceMockRecorder
}

// MockEvaluationRuleServiceMockRecorder is the mock recorder for MockEvaluationRuleService.
type MockEvaluationRuleServiceMockRecorder struct {
	mock *MockEvaluationRuleService
}

// NewMockEvaluationRuleService creates a new mock instance.
func NewMockEvaluationRuleService(ctrl *gomock.Controller) *MockEvaluationRuleService {
	mock := &MockEvaluationRuleService{ctrl: ctrl}
	mock.recorder = &MockEvaluationRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationRuleService) EXPECT() *MockEvaluationRuleServiceMockRecorder {
	return m.recorder
}

// CreateEvaluationRule mocks base method.
func (m *MockEvaluationRuleService) CreateEvaluationRule(ctx context.Context, evaluationRule domain.EvaluationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationRule", ctx, evaluationRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvaluationRule indicates an expected call of CreateEvaluationRule.
func (mr *MockEvaluationRuleServiceMockRecorder) CreateEvaluationRule(ctx, evaluationRule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationRule", reflect.TypeOf((*MockEvaluationRuleService)(nil).CreateEvaluationRule), ctx, evaluationRule)
}

// DeleteEvaluationRule mocks base method.
func (m *MockEvaluationRuleService) DeleteEvaluationRule(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationRule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluationRule indicates an expected call of DeleteEvaluationRule.
func (mr *MockEvaluationRuleServiceMockRecorder) DeleteEvaluationRule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationRule", reflect.TypeOf((*MockEvaluationRuleService)(nil).DeleteEvaluationRule), ctx, id)
}

// GetEvaluationRule mocks base method.
func (m *MockEvaluationRuleService) GetEvaluationRule(ctx context.Context, id domain.ID) (domain.EvaluationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationRule", ctx, id)
	ret0, _ := ret[0].(domain.EvaluationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationRule indicates an expected call of GetEvaluationRule.
func (mr *MockEvaluationRuleServiceMockRecorder) GetEvaluationRule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationRule", reflect.TypeOf((*MockEvaluationRuleService)(nil).GetEvaluationRule), ctx, id)
}

// UpdateEvaluationRule mocks base method.
func (m *MockEvaluationRuleService) UpdateEvaluationRule(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationRule", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluationRule indicates an expected call of UpdateEvaluationRule.
func (mr *MockEvaluationRuleServiceMockRecorder) UpdateEvaluationRule(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationRule", reflect.TypeOf((*MockEvaluationRuleService)(nil).UpdateEvaluationRule), ctx)
}
