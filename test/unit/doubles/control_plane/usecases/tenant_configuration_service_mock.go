// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/control_plane/usecases/tenant_configuration_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/control_plane/usecases/tenant_configuration_service.go -destination=./test/unit/doubles/control_plane/usecases/tenant_configuration_service_mock.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	domain "zensor-server/internal/shared_kernel/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTenantConfigurationService is a mock of TenantConfigurationService interface.
type MockTenantConfigurationService struct {
	ctrl     *gomock.Controller
	recorder *MockTenantConfigurationServiceMockRecorder
	isgomock struct{}
}

// MockTenantConfigurationServiceMockRecorder is the mock recorder for MockTenantConfigurationService.
type MockTenantConfigurationServiceMockRecorder struct {
	mock *MockTenantConfigurationService
}

// NewMockTenantConfigurationService creates a new mock instance.
func NewMockTenantConfigurationService(ctrl *gomock.Controller) *MockTenantConfigurationService {
	mock := &MockTenantConfigurationService{ctrl: ctrl}
	mock.recorder = &MockTenantConfigurationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantConfigurationService) EXPECT() *MockTenantConfigurationServiceMockRecorder {
	return m.recorder
}

// CreateTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) CreateTenantConfiguration(ctx context.Context, config domain.TenantConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenantConfiguration", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTenantConfiguration indicates an expected call of CreateTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) CreateTenantConfiguration(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).CreateTenantConfiguration), ctx, config)
}

// GetOrCreateTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) GetOrCreateTenantConfiguration(ctx context.Context, tenant domain.Tenant, defaultTimezone string) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTenantConfiguration", ctx, tenant, defaultTimezone)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTenantConfiguration indicates an expected call of GetOrCreateTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) GetOrCreateTenantConfiguration(ctx, tenant, defaultTimezone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).GetOrCreateTenantConfiguration), ctx, tenant, defaultTimezone)
}

// GetTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) GetTenantConfiguration(ctx context.Context, tenant domain.Tenant) (domain.TenantConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantConfiguration", ctx, tenant)
	ret0, _ := ret[0].(domain.TenantConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantConfiguration indicates an expected call of GetTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) GetTenantConfiguration(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).GetTenantConfiguration), ctx, tenant)
}

// UpdateTenantConfiguration mocks base method.
func (m *MockTenantConfigurationService) UpdateTenantConfiguration(ctx context.Context, config domain.TenantConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantConfiguration", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTenantConfiguration indicates an expected call of UpdateTenantConfiguration.
func (mr *MockTenantConfigurationServiceMockRecorder) UpdateTenantConfiguration(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantConfiguration", reflect.TypeOf((*MockTenantConfigurationService)(nil).UpdateTenantConfiguration), ctx, config)
}
