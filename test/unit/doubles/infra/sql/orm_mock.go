// Code generated by MockGen. DO NOT EDIT.
// Source: orm.go
//
// Generated by this command:
//
//	mockgen -source=orm.go -destination=../../../test/unit/doubles/infra/sql/orm_mock.go -package=sql -mock_names=ORM=MockORM
//

// Package sql is a generated GoMock package.
package sql

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	sql0 "zensor-server/internal/infra/sql"

	gomock "go.uber.org/mock/gomock"
)

// MockORM is a mock of ORM interface.
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
	isgomock struct{}
}

// MockORMMockRecorder is the mock recorder for MockORM.
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance.
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockORM) AutoMigrate(dst ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockORMMockRecorder) AutoMigrate(dst ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockORM)(nil).AutoMigrate), dst...)
}

// Count mocks base method.
func (m *MockORM) Count(count *int64) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockORMMockRecorder) Count(count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockORM)(nil).Count), count)
}

// Create mocks base method.
func (m *MockORM) Create(value any) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockORMMockRecorder) Create(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockORM)(nil).Create), value)
}

// Delete mocks base method.
func (m *MockORM) Delete(value any, conds ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockORMMockRecorder) Delete(value any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockORM)(nil).Delete), varargs...)
}

// Error mocks base method.
func (m *MockORM) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockORMMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockORM)(nil).Error))
}

// Find mocks base method.
func (m *MockORM) Find(dest any, conds ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockORMMockRecorder) Find(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockORM)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockORM) First(dest any, conds ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockORMMockRecorder) First(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockORM)(nil).First), varargs...)
}

// InnerJoins mocks base method.
func (m *MockORM) InnerJoins(value string, args ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InnerJoins", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// InnerJoins indicates an expected call of InnerJoins.
func (mr *MockORMMockRecorder) InnerJoins(value any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerJoins", reflect.TypeOf((*MockORM)(nil).InnerJoins), varargs...)
}

// Joins mocks base method.
func (m *MockORM) Joins(value string, args ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockORMMockRecorder) Joins(value any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockORM)(nil).Joins), varargs...)
}

// Limit mocks base method.
func (m *MockORM) Limit(limit int) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockORMMockRecorder) Limit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockORM)(nil).Limit), limit)
}

// Model mocks base method.
func (m *MockORM) Model(value any) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockORMMockRecorder) Model(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockORM)(nil).Model), value)
}

// Offset mocks base method.
func (m *MockORM) Offset(offset int) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockORMMockRecorder) Offset(offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockORM)(nil).Offset), offset)
}

// Order mocks base method.
func (m *MockORM) Order(value any) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockORMMockRecorder) Order(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockORM)(nil).Order), value)
}

// Preload mocks base method.
func (m *MockORM) Preload(query string, args ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockORMMockRecorder) Preload(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockORM)(nil).Preload), varargs...)
}

// Save mocks base method.
func (m *MockORM) Save(value any) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockORMMockRecorder) Save(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockORM)(nil).Save), value)
}

// Transaction mocks base method.
func (m *MockORM) Transaction(fc func(sql0.ORM) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockORMMockRecorder) Transaction(fc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockORM)(nil).Transaction), varargs...)
}

// Unscoped mocks base method.
func (m *MockORM) Unscoped() sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockORMMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockORM)(nil).Unscoped))
}

// Where mocks base method.
func (m *MockORM) Where(query any, args ...any) sql0.ORM {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockORMMockRecorder) Where(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockORM)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockORM) WithContext(ctx context.Context) sql0.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(sql0.ORM)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockORMMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockORM)(nil).WithContext), ctx)
}
