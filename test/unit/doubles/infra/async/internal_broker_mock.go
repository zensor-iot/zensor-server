// Code generated by MockGen. DO NOT EDIT.
// Source: internal_broker.go
//
// Generated by this command:
//
//	mockgen -source=internal_broker.go -destination=../../../test/unit/doubles/infra/async/internal_broker_mock.go -package=async -mock_names=InternalBroker=MockInternalBroker
//

// Package async is a generated GoMock package.
package async

import (
	context "context"
	reflect "reflect"
	async "zensor-server/internal/infra/async"

	gomock "go.uber.org/mock/gomock"
)

// MockInternalBrokerSubscriptor is a mock of InternalBrokerSubscriptor interface.
type MockInternalBrokerSubscriptor struct {
	ctrl     *gomock.Controller
	recorder *MockInternalBrokerSubscriptorMockRecorder
	isgomock struct{}
}

// MockInternalBrokerSubscriptorMockRecorder is the mock recorder for MockInternalBrokerSubscriptor.
type MockInternalBrokerSubscriptorMockRecorder struct {
	mock *MockInternalBrokerSubscriptor
}

// NewMockInternalBrokerSubscriptor creates a new mock instance.
func NewMockInternalBrokerSubscriptor(ctrl *gomock.Controller) *MockInternalBrokerSubscriptor {
	mock := &MockInternalBrokerSubscriptor{ctrl: ctrl}
	mock.recorder = &MockInternalBrokerSubscriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalBrokerSubscriptor) EXPECT() *MockInternalBrokerSubscriptorMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockInternalBrokerSubscriptor) AddSubscription(b async.InternalBroker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubscription", b)
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockInternalBrokerSubscriptorMockRecorder) AddSubscription(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockInternalBrokerSubscriptor)(nil).AddSubscription), b)
}

// MockInternalBroker is a mock of InternalBroker interface.
type MockInternalBroker struct {
	ctrl     *gomock.Controller
	recorder *MockInternalBrokerMockRecorder
	isgomock struct{}
}

// MockInternalBrokerMockRecorder is the mock recorder for MockInternalBroker.
type MockInternalBrokerMockRecorder struct {
	mock *MockInternalBroker
}

// NewMockInternalBroker creates a new mock instance.
func NewMockInternalBroker(ctrl *gomock.Controller) *MockInternalBroker {
	mock := &MockInternalBroker{ctrl: ctrl}
	mock.recorder = &MockInternalBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalBroker) EXPECT() *MockInternalBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockInternalBroker) Publish(ctx context.Context, topic async.BrokerTopicName, msg async.BrokerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockInternalBrokerMockRecorder) Publish(ctx, topic, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInternalBroker)(nil).Publish), ctx, topic, msg)
}

// Stop mocks base method.
func (m *MockInternalBroker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockInternalBrokerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInternalBroker)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockInternalBroker) Subscribe(topic async.BrokerTopicName) (async.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(async.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockInternalBrokerMockRecorder) Subscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockInternalBroker)(nil).Subscribe), topic)
}

// Unsubscribe mocks base method.
func (m *MockInternalBroker) Unsubscribe(topic async.BrokerTopicName, subscription async.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockInternalBrokerMockRecorder) Unsubscribe(topic, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockInternalBroker)(nil).Unsubscribe), topic, subscription)
}
