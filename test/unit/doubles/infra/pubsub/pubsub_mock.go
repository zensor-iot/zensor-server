// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go
//
// Generated by this command:
//
//	mockgen -source=pubsub.go -destination=../../../test/unit/doubles/infra/pubsub/pubsub_mock.go -package=pubsub -mock_names=ConsumerFactory=MockConsumerFactory,Consumer=MockConsumer,PublisherFactory=MockPublisherFactory,Publisher=MockPublisher
//

// Package pubsub is a generated GoMock package.
package pubsub

import (
	context "context"
	reflect "reflect"
	pubsub "zensor-server/internal/infra/pubsub"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisherFactory is a mock of PublisherFactory interface.
type MockPublisherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherFactoryMockRecorder
	isgomock struct{}
}

// MockPublisherFactoryMockRecorder is the mock recorder for MockPublisherFactory.
type MockPublisherFactoryMockRecorder struct {
	mock *MockPublisherFactory
}

// NewMockPublisherFactory creates a new mock instance.
func NewMockPublisherFactory(ctrl *gomock.Controller) *MockPublisherFactory {
	mock := &MockPublisherFactory{ctrl: ctrl}
	mock.recorder = &MockPublisherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherFactory) EXPECT() *MockPublisherFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockPublisherFactory) New(arg0 pubsub.Topic, arg1 pubsub.Message) (pubsub.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(pubsub.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPublisherFactoryMockRecorder) New(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPublisherFactory)(nil).New), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher) Publish(arg0 context.Context, arg1 pubsub.Key, arg2 pubsub.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), arg0, arg1, arg2)
}

// MockConsumerFactory is a mock of ConsumerFactory interface.
type MockConsumerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerFactoryMockRecorder
	isgomock struct{}
}

// MockConsumerFactoryMockRecorder is the mock recorder for MockConsumerFactory.
type MockConsumerFactoryMockRecorder struct {
	mock *MockConsumerFactory
}

// NewMockConsumerFactory creates a new mock instance.
func NewMockConsumerFactory(ctrl *gomock.Controller) *MockConsumerFactory {
	mock := &MockConsumerFactory{ctrl: ctrl}
	mock.recorder = &MockConsumerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerFactory) EXPECT() *MockConsumerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockConsumerFactory) New() pubsub.Consumer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(pubsub.Consumer)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockConsumerFactoryMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockConsumerFactory)(nil).New))
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockConsumer) Consume(arg0 pubsub.Topic, arg1 pubsub.MessageHandler, arg2 pubsub.Prototype) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), arg0, arg1, arg2)
}
