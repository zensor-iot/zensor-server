// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/notification/notification_client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/infra/notification/notification_client.go -destination=./test/unit/doubles/infra/notification/notification_client_mock.go -package=notification
//

// Package notification is a generated GoMock package.
package notification

import (
	context "context"
	reflect "reflect"
	notification "zensor-server/internal/infra/notification"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
	isgomock struct{}
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotificationClient) SendEmail(ctx context.Context, request notification.EmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotificationClientMockRecorder) SendEmail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationClient)(nil).SendEmail), ctx, request)
}
