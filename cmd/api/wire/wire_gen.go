// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"zensor-server/cmd/config"
	"zensor-server/internal/control_plane/communication"
	"zensor-server/internal/control_plane/httpapi"
	"zensor-server/internal/control_plane/persistence"
	"zensor-server/internal/control_plane/usecases"
	"zensor-server/internal/infra/pubsub"
	"zensor-server/internal/infra/sql"
)

// Injectors from control_plane.go:

func InitializeEvaluationRuleController() (*httpapi.EvaluationRuleController, error) {
	simpleEvaluationRuleService := usecases.NewEvaluationRuleService()
	evaluationRuleController := httpapi.NewEvaluationRuleController(simpleEvaluationRuleService)
	return evaluationRuleController, nil
}

func InitializeDeviceController() (*httpapi.DeviceController, error) {
	appConfig := provideAppConfig()
	kafkaPublisherFactoryOptions := provideKafkaPublisherFactoryOptions(appConfig)
	kafkaPublisherFactory := pubsub.NewKafkaPublisherFactory(kafkaPublisherFactoryOptions)
	orm := provideDatabase(appConfig)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(kafkaPublisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(kafkaPublisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	deviceController := httpapi.NewDeviceController(simpleDeviceService)
	return deviceController, nil
}

func InitializeDeviceService() (usecases.DeviceService, error) {
	appConfig := provideAppConfig()
	kafkaPublisherFactoryOptions := provideKafkaPublisherFactoryOptions(appConfig)
	kafkaPublisherFactory := pubsub.NewKafkaPublisherFactory(kafkaPublisherFactoryOptions)
	orm := provideDatabase(appConfig)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(kafkaPublisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(kafkaPublisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	return simpleDeviceService, nil
}

// control_plane.go:

var DeviceServiceSet = wire.NewSet(
	provideDatabase,
	provideKafkaPublisherFactoryOptions, pubsub.NewKafkaPublisherFactory, wire.Bind(new(pubsub.PublisherFactory), new(*pubsub.KafkaPublisherFactory)), persistence.NewDeviceRepository, wire.Bind(new(usecases.DeviceRepository), new(*persistence.SimpleDeviceRepository)), communication.NewCommandPublisher, wire.Bind(new(usecases.CommandPublisher), new(*communication.CommandPublisher)), usecases.NewDeviceService,
)

func provideKafkaPublisherFactoryOptions(config2 config.AppConfig) pubsub.KafkaPublisherFactoryOptions {
	return pubsub.KafkaPublisherFactoryOptions{
		Brokers: config2.Kafka.Brokers,
	}
}

func provideDatabase(config2 config.AppConfig) sql.ORM {
	db := sql.NewPosgreDatabase(config2.Postgresql.URL)
	if err := db.Open(); err != nil {
		panic(err)
	}

	db.Up("migrations", config2.Postgresql.MigrationReplacements)

	orm, err := sql.NewPosgreORM(config2.Postgresql.DSN)
	if err != nil {
		panic(err)
	}

	return orm
}
