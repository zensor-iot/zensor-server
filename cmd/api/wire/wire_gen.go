// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"os"
	"time"
	"zensor-server/cmd/config"
	"zensor-server/internal/control_plane/communication"
	"zensor-server/internal/control_plane/httpapi"
	"zensor-server/internal/control_plane/persistence"
	"zensor-server/internal/control_plane/usecases"
	"zensor-server/internal/infra/async"
	"zensor-server/internal/infra/pubsub"
	"zensor-server/internal/infra/replication"
	"zensor-server/internal/infra/replication/handlers"
	"zensor-server/internal/infra/sql"
)

// Injectors from control_plane.go:

func InitializeEvaluationRuleController() (*httpapi.EvaluationRuleController, error) {
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	evaluationRuleRepository, err := persistence.NewEvaluationRuleRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	simpleEvaluationRuleService := usecases.NewEvaluationRuleService(evaluationRuleRepository)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	evaluationRuleController := httpapi.NewEvaluationRuleController(simpleEvaluationRuleService, simpleDeviceService)
	return evaluationRuleController, nil
}

func InitializeDeviceController() (*httpapi.DeviceController, error) {
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	deviceController := httpapi.NewDeviceController(simpleDeviceService)
	return deviceController, nil
}

func InitializeTaskController() (*httpapi.TaskController, error) {
	appConfig := provideAppConfig()
	factory := providePubSubFactory(appConfig)
	publisherFactory := providePublisherFactory(factory)
	simpleTaskRepository, err := persistence.NewTaskRepository(publisherFactory)
	if err != nil {
		return nil, err
	}
	orm := provideDatabase(appConfig)
	simpleCommandRepository, err := persistence.NewCommandRepository(orm)
	if err != nil {
		return nil, err
	}
	simpleTaskService := usecases.NewTaskService(simpleTaskRepository, simpleCommandRepository)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	taskController := httpapi.NewTaskController(simpleTaskService, simpleDeviceService)
	return taskController, nil
}

func InitializeScheduledTaskController() (*httpapi.ScheduledTaskController, error) {
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	simpleScheduledTaskRepository, err := persistence.NewScheduledTaskRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	simpleScheduledTaskService := usecases.NewScheduledTaskService(simpleScheduledTaskRepository)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	simpleTenantRepository, err := persistence.NewTenantRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	simpleTenantService := usecases.NewTenantService(simpleTenantRepository, simpleDeviceService)
	scheduledTaskController := httpapi.NewScheduledTaskController(simpleScheduledTaskService, simpleDeviceService, simpleTenantService)
	return scheduledTaskController, nil
}

func InitializeScheduledTaskWorker(broker async.InternalBroker) (*usecases.ScheduledTaskWorker, error) {
	ticker := provideTicker()
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	simpleScheduledTaskRepository, err := persistence.NewScheduledTaskRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	simpleTaskRepository, err := persistence.NewTaskRepository(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleCommandRepository, err := persistence.NewCommandRepository(orm)
	if err != nil {
		return nil, err
	}
	simpleTaskService := usecases.NewTaskService(simpleTaskRepository, simpleCommandRepository)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	scheduledTaskWorker := usecases.NewScheduledTaskWorker(ticker, simpleScheduledTaskRepository, simpleTaskService, simpleDeviceService, broker)
	return scheduledTaskWorker, nil
}

func InitializeTenantController() (*httpapi.TenantController, error) {
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	simpleTenantRepository, err := persistence.NewTenantRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	simpleTenantService := usecases.NewTenantService(simpleTenantRepository, simpleDeviceService)
	tenantController := httpapi.NewTenantController(simpleTenantService)
	return tenantController, nil
}

func InitializeDeviceService() (usecases.DeviceService, error) {
	appConfig := provideAppConfig()
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	orm := provideDatabase(appConfig)
	simpleDeviceRepository, err := persistence.NewDeviceRepository(publisherFactory, orm)
	if err != nil {
		return nil, err
	}
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	simpleDeviceService := usecases.NewDeviceService(simpleDeviceRepository, commandPublisher)
	return simpleDeviceService, nil
}

func InitializeCommandWorker(broker async.InternalBroker) (*usecases.CommandWorker, error) {
	ticker := provideTicker()
	appConfig := provideAppConfig()
	orm := provideDatabase(appConfig)
	simpleCommandRepository, err := persistence.NewCommandRepository(orm)
	if err != nil {
		return nil, err
	}
	publisherFactory := providePublisherFactoryForEnvironment(appConfig)
	commandPublisher, err := communication.NewCommandPublisher(publisherFactory)
	if err != nil {
		return nil, err
	}
	commandWorker := usecases.NewCommandWorker(ticker, simpleCommandRepository, commandPublisher, broker)
	return commandWorker, nil
}

func InitializeDeviceMessageWebSocketController(broker async.InternalBroker) (*httpapi.DeviceMessageWebSocketController, error) {
	deviceMessageWebSocketController := httpapi.NewDeviceMessageWebSocketController(broker)
	return deviceMessageWebSocketController, nil
}

func InitializeReplicationService() (*replication.Service, error) {
	consumerFactory := provideMemoryConsumerFactory()
	appConfig := provideAppConfig()
	orm := provideDatabase(appConfig)
	service := replication.NewService(consumerFactory, orm)
	return service, nil
}

func InitializeDeviceHandler() (*handlers.DeviceHandler, error) {
	appConfig := provideAppConfig()
	orm := provideDatabase(appConfig)
	deviceHandler := handlers.NewDeviceHandler(orm)
	return deviceHandler, nil
}

func InitializeTenantHandler() (*handlers.TenantHandler, error) {
	appConfig := provideAppConfig()
	orm := provideDatabase(appConfig)
	tenantHandler := handlers.NewTenantHandler(orm)
	return tenantHandler, nil
}

// control_plane.go:

var DeviceServiceSet = wire.NewSet(
	provideDatabase, persistence.NewDeviceRepository, wire.Bind(new(usecases.DeviceRepository), new(*persistence.SimpleDeviceRepository)), communication.NewCommandPublisher, wire.Bind(new(usecases.CommandPublisher), new(*communication.CommandPublisher)), usecases.NewDeviceService,
)

func providePubSubFactory(config2 config.AppConfig) *pubsub.Factory {
	env, ok := os.LookupEnv("ENV")
	if !ok {
		env = "production"
	}

	return pubsub.NewFactory(pubsub.FactoryOptions{
		Environment:   env,
		KafkaBrokers:  config2.Kafka.Brokers,
		ConsumerGroup: "zensor-server",
	})
}

func providePublisherFactory(factory *pubsub.Factory) pubsub.PublisherFactory {
	return factory.GetPublisherFactory()
}

func provideKafkaPublisherFactoryOptions(config2 config.AppConfig) pubsub.KafkaPublisherFactoryOptions {
	return pubsub.KafkaPublisherFactoryOptions{
		Brokers: config2.Kafka.Brokers,
	}
}

func provideDatabase(config2 config.AppConfig) sql.ORM {
	env, ok := os.LookupEnv("ENV")
	if !ok {
		env = "production"
	}

	if env == "local" {
		orm, err := sql.NewMemoryORM("migrations", config2.Postgresql.MigrationReplacements)
		if err != nil {
			panic(err)
		}

		return orm
	}

	db := sql.NewPosgreDatabase(config2.Postgresql.URL)
	if err := db.Open(); err != nil {
		panic(err)
	}

	db.Up("migrations", config2.Postgresql.MigrationReplacements)

	orm, err := sql.NewPosgreORM(config2.Postgresql.DSN)
	if err != nil {
		panic(err)
	}

	return orm
}

func provideTicker() *time.Ticker {
	ticker := time.NewTicker(30 * time.Second)
	return ticker
}

func provideMemoryConsumerFactory() pubsub.ConsumerFactory {
	env, ok := os.LookupEnv("ENV")
	if !ok {
		env = "production"
	}

	if env == "local" {
		return pubsub.NewMemoryConsumerFactory("replicator")
	}

	return nil
}

func providePublisherFactoryForEnvironment(config2 config.AppConfig) pubsub.PublisherFactory {
	env, ok := os.LookupEnv("ENV")
	if !ok {
		env = "production"
	}

	if env == "local" {
		return pubsub.NewMemoryPublisherFactory()
	}

	kafkaOptions := provideKafkaPublisherFactoryOptions(config2)
	return pubsub.NewKafkaPublisherFactory(kafkaOptions)
}
